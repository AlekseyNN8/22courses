{
	"info": {
		"_postman_id": "951fad23-12a2-49c8-9455-8ad2aedbb2ce",
		"name": "HM_1_5",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});                                         //Статус код 200\r",
							"\r",
							"let jsonData = pm.response.json();          // Спарсить response body в json.\r",
							"\r",
							"pm.test(\"Test Alex = name_request\", function (){\r",
							"    pm.expect('Alex').to.be.eql(jsonData.name)\r",
							"});                                         // Проверить, что name в ответе равно name c Alex\r",
							"\r",
							"// console.log('jsonData.name', jsonData.name)             // проверка\r",
							"\r",
							"pm.test(\"Test 30 = age_response\", function (){\r",
							"    pm.expect('30').to.be.eql(jsonData.age)\r",
							"});                                          //Проверить, что age в ответе равно age s request\r",
							"\r",
							"// console.log('jsonData.age', jsonData.age)             //проверка\r",
							"\r",
							"pm.test(\"Test 1500 = salary_response\", function (){\r",
							"    pm.expect(1500).to.be.eql(jsonData.salary)\r",
							"});                                          //Проверить, что salary в ответе равно salary s request\r",
							"\r",
							"// console.log('jsonData.salary', jsonData.salary)             //проверка\r",
							"\r",
							"var req = request.data;                        //Спарсить request.\r",
							"\r",
							"console.log(req)                                //Проверка\r",
							"\r",
							"pm.test(\"Test name_request = name_response\", function (){\r",
							"    pm.expect(request.data.name).to.be.eql(jsonData.name)\r",
							"});                                         // Проверить, что name в ответе равно name c request\r",
							"\r",
							"// console.log('request.data.name', request.data.name)     // проверка\r",
							"// console.log('jsonData.name', jsonData.name)             // проверка\r",
							"\r",
							"pm.test(\"Test request_age = age_response\", function (){\r",
							"    pm.expect(request.data.age).to.be.eql(jsonData.age)\r",
							"});                                          //Проверить, что age в ответе равно age s request\r",
							"\r",
							"// console.log('request.data.age', request.data.age)     // проверка\r",
							"// console.log('jsonData.age', jsonData.age)             //проверка\r",
							"\r",
							"pm.test(\"Test salary_request = salary_response\", function (){\r",
							"    pm.expect(+request.data.salary).to.be.eql(jsonData.salary)\r",
							"});                                          //Проверить, что salary в ответе равно salary s request\r",
							"\r",
							"// console.log('request.data.salary', +request.data.salary)     // проверка\r",
							"// console.log('jsonData.salary', jsonData.salary)             //проверка\r",
							"\r",
							"// console.log('family = ', jsonData.family)       //Вывести в консоль параметр family из response.\r",
							"\r",
							"pm.test('Test u_salary_1_5_year to be eql salary*4', function (){\r",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.be.eql(req.salary*4)\r",
							"});                             //Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"// console.log(jsonData.family.u_salary_1_5_year)      //Проверка\r",
							"// console.log(req.salary*4)                           //Проверка"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let jsonData = pm.response.json();      //Спарсить response body в json.\r",
							"\r",
							"// let req = pm.response.requst.data;\r",
							"\r",
							"\r",
							"let jsonReq = pm.request.url.query.toObject()   //Спарсить request.\r",
							"// console.log(jsonReq)                            //Проверка\r",
							"\r",
							"pm.test('Name request = name response', () => {\r",
							"    pm.expect(jsonReq.name).to.be.eql(jsonData.name)\r",
							" })                                           //Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"// console.log(jsonReq.name)                     //Проверка      \r",
							"// console.log(jsonData.name)                     //Проверка\r",
							"\r",
							"pm.test('Age request = Age response', () => {\r",
							"    pm.expect(jsonReq.age).to.be.eql(jsonData.age)\r",
							" })                                           //Проверить, что age в ответе равно age s request (name забрать из request.)\r",
							"\r",
							"// console.log(jsonReq.age)                     //Проверка      \r",
							"// console.log(jsonData.age)                     //Проверка\r",
							"\r",
							"pm.test('salary request = salary response', () => {\r",
							"    pm.expect(+jsonReq.salary).to.be.eql(jsonData.salary)\r",
							" })                                           //Проверить, что age в ответе равно age s request (name забрать из request.)\r",
							"\r",
							"// console.log(+jsonReq.salary)                     //Проверка      \r",
							"// console.log(jsonData.salary)                     //Проверка\r",
							"\r",
							"console.log(jsonData.family)            //Вывести в консоль параметр family из response.\r",
							"\r",
							"\r",
							"pm.test('Param DOG have NAME', () => {\r",
							"    var task = _.find(jsonData, {'jsonData.family.pets.dog': \"Name\"})\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\"); \r",
							"});                             //Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test('Param DOG have AGE', () => {\r",
							"    var task = _.find(jsonData, {'jsonData.family.pets.dog': \"age\"})\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\"); \r",
							"});                             //Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test('Param NAME have LUKY', () => {\r",
							"    var task = _.find(jsonData, {'jsonData.family.pets.dog.name': \"Luky\"})\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.be.eql(\"Luky\"); \r",
							"});                             //Проверить, что у параметра name есть параметры Luky.\r",
							"\r",
							"pm.test('Param AGE have 4', () => {\r",
							"    var task = _.find(jsonData, {'jsonData.family.pets.dog.age': \"4\"})\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.be.eql(4); \r",
							"});                             //Проверить, что у параметра age есть параметры 4.\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Alex&age=30&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});                     //Статус код 200\r",
							"\r",
							"let jsonData = pm.response.json()       //Спарсить response body в json.\r",
							"let reqData = pm.request.url.query.toObject()   //Спарсить request.\r",
							"\r",
							"\r",
							"pm.test('Name request = Name response', () => {\r",
							"    pm.expect(jsonData.name).to.be.eql(reqData.name)\r",
							"});                             //Проверить, что name в ответе равно name s request (name забрать из request.) \r",
							"\r",
							"pm.test('Age request = Age response', () => {\r",
							"    pm.expect(jsonData.age).to.be.eql(+reqData.age)\r",
							"});                             //Проверить, что age в ответе равно age s request (age забрать из request.)      \r",
							"\r",
							"console.log(reqData.salary)            //Вывести в консоль параметр salary из request.\r",
							"\r",
							"console.log(jsonData.salary)            //Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(jsonData.salary[0])         //Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(jsonData.salary[1])         //Вывести в консоль 1-й элемент параметра salary из response.\r",
							"\r",
							"console.log(jsonData.salary[2])         //Вывести в консоль 2-й элемент параметра salary из response.\r",
							"\r",
							"pm.test('Salary request = Salary1 response', () => {\r",
							"    pm.expect(+reqData.salary).to.be.eql(jsonData.salary[0])\r",
							"});                                     //Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test('Salary request = Salary2 response', () => {\r",
							"    pm.expect(+reqData.salary*2).to.be.eql(+jsonData.salary[1])\r",
							"});                                //Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)                                      \r",
							"\r",
							"pm.test('Salary request = Salary3 response', () => {\r",
							"    pm.expect(+reqData.salary*3).to.be.eql(+jsonData.salary[2])\r",
							"});                         // Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)       \r",
							"\r",
							"let name = jsonData.name\r",
							"let age = jsonData.age\r",
							"let salary = jsonData.salary[0]\r",
							"\r",
							"pm.environment.set('name', name)\r",
							"pm.environment.set('age', age)\r",
							"pm.environment.set('salary', salary)\r",
							"\r",
							"for (var i = 0; i < 9; i++) {\r",
							"   console.log(i);\r",
							"   // ещё какие-то выражения\r",
							"}\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Alex&age=30&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});                                 //Статус код 200\r",
							"\r",
							"let jsonData = pm.response.json()   //Спарсить response body в json\r",
							"\r",
							"let reqData = pm.request.body.formdata.toObject()   //Спарсить request\r",
							"\r",
							"pm.test('start_qa_salary CHECK', () => {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\")\r",
							"});                         //Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test('qa_salary_after_6_months CHECK', () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\")\r",
							"});                         //Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test('qa_salary_after_12_months CHECK', () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\")\r",
							"});                         //Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test('qa_salary_after_1.5_year CHECK', () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\")\r",
							"});                         //Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test('qa_salary_after_3.5_years CHECK', () => {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\")\r",
							"});                         //Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test('person CHECK', () => {\r",
							"    pm.expect(jsonData).to.have.property(\"person\")\r",
							"});                         //Проверить, что json response имеет параметр person\r",
							"\r",
							"\r",
							"pm.test('start_qa_salary to be eql salary from request', () =>  {\r",
							"    pm.expect(jsonData.start_qa_salary).to.be.eql(+reqData.salary)\r",
							"});                         //Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)    \r",
							"\r",
							"pm.test('qa_salary_after_6_months to be eql salary*2 from request', () =>  {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.be.eql(+reqData.salary*2)\r",
							"});                         //Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('qa_salary_after_12_months to be eql salary*2.7 from request', () =>  {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.be.eql(+reqData.salary*2.7)\r",
							"});                         //Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"// const numb1_5 = ['jsonData.qa_salary_after_1.5_year'];\r",
							"// console.log(numb1_5)\r",
							"pm.test('qa_salary_after_1.5_year to be eql salary*3.3 from request', () =>  {\r",
							"    pm.expect(jsonData['qa_salary_after_1.5_year']).to.be.eql(+reqData.salary*3.3)\r",
							"});                         //Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('qa_salary_after_3.5_years to be eql salary*3.8 from request', () =>  {\r",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.be.eql(+reqData.salary*3.8)\r",
							"});                         //Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test('person1 из u_name to be eql salary from request', () => {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.be.eql(+reqData.salary)\r",
							"});                             //Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test('U_AGE = AGE from REQUEST', () => {\r",
							"    pm.expect(jsonData.person.u_age).to.be.eql(+reqData.age)\r",
							"});                                      // Проверить, что что параметр u_age равен age из request (age забрать из request.)   \r",
							"\r",
							"pm.test('u_salary_5_years to be eql salary*4.2 from request', () => {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.be.eql(+reqData.salary*4.2)\r",
							"});               //Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)   \r",
							"\r",
							"// let person = jsonData.person\r",
							"// pm.test('Proverka', () => {\r",
							"// for (let [key] of Object.entries(person)) {\r",
							"//     console.log(`${key}`);\r",
							"// };\r",
							"// })              //Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"\r",
							"let JSD = pm.response.json();\r",
							"let person = JSD.person;\r",
							"console.log(person);\r",
							"for (let [key] of Object.entries(person)) {\r",
							"    console.log('${key}');\r",
							"};\r",
							"\r",
							"\r",
							"console.log(Object.entries(person))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}